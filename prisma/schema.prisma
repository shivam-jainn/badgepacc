datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  isOrg         Boolean?
  bio           String?
  website       String?
  banner        String?
  username      String?
  accounts      Account[]
  sessions      Session[]
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  skills       String[]
  badges         Badge[]
  tokens         Tokens[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}


model Badge {
  id               String   @id @default(cuid())
  name             String
  pic              String
  description      String
  no_of_issued     Int
  time_of_creation DateTime
  creator          User     @relation(fields: [creator_email], references: [email])
  creator_email    String
  tokens           Tokens[]
}

model Tokens {
  id            String   @id @default(cuid())
  issuance_time DateTime
  issuance_id   String    
  user          User     @relation(fields: [user_email], references: [email])
  user_email       String
  badge         Badge   @relation(fields: [badge_id], references: [id])
  badge_id      String

  @@unique([user_email, badge_id]) 
}